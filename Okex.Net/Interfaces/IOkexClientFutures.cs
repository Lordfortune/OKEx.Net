using CryptoExchange.Net.Objects;
using Okex.Net.Enums;
using Okex.Net.RestObjects;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace Okex.Net.Interfaces
{
    public interface IOkexClientFutures
    {
        WebCallResult<OkexFuturesAlgoCancelledOrder> Futures_AlgoCancelOrder(string symbol, OkexAlgoOrderType type, IEnumerable<string> algo_ids, CancellationToken ct = default);
        Task<WebCallResult<OkexFuturesAlgoCancelledOrder>> Futures_AlgoCancelOrder_Async(string symbol, OkexAlgoOrderType type, IEnumerable<string> algo_ids, CancellationToken ct = default);
        WebCallResult<IEnumerable<OkexFuturesAlgoOrder>> Futures_AlgoGetOrders(string symbol, OkexAlgoOrderType type, OkexAlgoStatus? status = null, IEnumerable<string> algo_ids = null, int limit = 100, long? before = null, long? after = null, CancellationToken ct = default);
        Task<WebCallResult<IEnumerable<OkexFuturesAlgoOrder>>> Futures_AlgoGetOrders_Async(string symbol, OkexAlgoOrderType type, OkexAlgoStatus? status = null, IEnumerable<string> algo_ids = null, int limit = 100, long? before = null, long? after = null, CancellationToken ct = default);
        WebCallResult<OkexFuturesAlgoPlacedOrder> Futures_AlgoPlaceOrder(string symbol, OkexFuturesOrderType type, OkexAlgoOrderType order_type, decimal size, decimal? trigger_price = null, decimal? trigger_algo_price = null, OkexAlgoPriceType? trigger_algo_type = null, decimal? trail_callback_rate = null, decimal? trail_trigger_price = null, decimal? iceberg_algo_variance = null, decimal? iceberg_avg_amount = null, decimal? iceberg_limit_price = null, decimal? twap_sweep_range = null, decimal? twap_sweep_ratio = null, int? twap_single_limit = null, decimal? twap_price_limit = null, int? twap_time_interval = null, OkexAlgoPriceType? tp_trigger_type = null, decimal? tp_trigger_price = null, decimal? tp_price = null, OkexAlgoPriceType? sl_trigger_type = null, decimal? sl_trigger_price = null, decimal? sl_price = null, CancellationToken ct = default);
        Task<WebCallResult<OkexFuturesAlgoPlacedOrder>> Futures_AlgoPlaceOrder_Async(string symbol, OkexFuturesOrderType type, OkexAlgoOrderType order_type, decimal size, decimal? trigger_price = null, decimal? trigger_algo_price = null, OkexAlgoPriceType? trigger_algo_type = null, decimal? trail_callback_rate = null, decimal? trail_trigger_price = null, decimal? iceberg_algo_variance = null, decimal? iceberg_avg_amount = null, decimal? iceberg_limit_price = null, decimal? twap_sweep_range = null, decimal? twap_sweep_ratio = null, int? twap_single_limit = null, decimal? twap_price_limit = null, int? twap_time_interval = null, OkexAlgoPriceType? tp_trigger_type = null, decimal? tp_trigger_price = null, decimal? tp_price = null, OkexAlgoPriceType? sl_trigger_type = null, decimal? sl_trigger_price = null, decimal? sl_price = null, CancellationToken ct = default);
        WebCallResult<OkexFuturesAutoMarginResponse> Futures_AutoMargin(string symbol, OkexFuturesAutoMargin status, CancellationToken ct = default);
        Task<WebCallResult<OkexFuturesAutoMarginResponse>> Futures_AutoMargin_Async(string symbol, OkexFuturesAutoMargin status, CancellationToken ct = default);
        WebCallResult<OkexFuturesBatchOrders> Futures_BatchCancelOrders(string symbol, IEnumerable<string> orderIds, IEnumerable<string> clientOrderIds, CancellationToken ct = default);
        Task<WebCallResult<OkexFuturesBatchOrders>> Futures_BatchCancelOrders_Async(string symbol, IEnumerable<string> orderIds, IEnumerable<string> clientOrderIds, CancellationToken ct = default);
        WebCallResult<OkexFuturesBatchPlacedOrder> Futures_BatchModifyOrders(string symbol, IEnumerable<OkexFuturesModifyOrder> orders, CancellationToken ct = default);
        Task<WebCallResult<OkexFuturesBatchPlacedOrder>> Futures_BatchModifyOrders_Async(string symbol, IEnumerable<OkexFuturesModifyOrder> orders, CancellationToken ct = default);
        WebCallResult<OkexFuturesBatchPlacedOrder> Futures_BatchPlaceOrders(string symbol, IEnumerable<OkexFuturesPlaceOrder> orders, CancellationToken ct = default);
        Task<WebCallResult<OkexFuturesBatchPlacedOrder>> Futures_BatchPlaceOrders_Async(string symbol, IEnumerable<OkexFuturesPlaceOrder> orders, CancellationToken ct = default);
        WebCallResult<OkexFuturesDirectionResponse> Futures_CancelAll(string symbol, OkexFuturesDirection direction, CancellationToken ct = default);
        Task<WebCallResult<OkexFuturesDirectionResponse>> Futures_CancelAll_Async(string symbol, OkexFuturesDirection direction, CancellationToken ct = default);
        WebCallResult<OkexFuturesPlacedOrder> Futures_CancelOrder(string symbol, long? orderId = null, string? clientOrderId = null, CancellationToken ct = default);
        Task<WebCallResult<OkexFuturesPlacedOrder>> Futures_CancelOrder_Async(string symbol, long? orderId = null, string? clientOrderId = null, CancellationToken ct = default);
        WebCallResult<OkexFuturesOrderList> Futures_GetAllOrders(string symbol, OkexFuturesOrderState state, int limit = 100, long? before = null, long? after = null, CancellationToken ct = default);
        Task<WebCallResult<OkexFuturesOrderList>> Futures_GetAllOrders_Async(string symbol, OkexFuturesOrderState state, int limit = 100, long? before = null, long? after = null, CancellationToken ct = default);
        WebCallResult<IEnumerable<OkexFuturesTicker>> Futures_GetAllTickers(CancellationToken ct = default);
        Task<WebCallResult<IEnumerable<OkexFuturesTicker>>> Futures_GetAllTickers_Async(CancellationToken ct = default);
        WebCallResult<OkexFuturesBalances> Futures_GetBalances(CancellationToken ct = default);
        WebCallResult<OkexFuturesBalance> Futures_GetBalances(string underlying, CancellationToken ct = default);
        Task<WebCallResult<OkexFuturesBalances>> Futures_GetBalances_Async(CancellationToken ct = default);
        Task<WebCallResult<OkexFuturesBalance>> Futures_GetBalances_Async(string underlying, CancellationToken ct = default);
        WebCallResult<IEnumerable<OkexFuturesCandle>> Futures_GetCandles(string symbol, OkexSpotPeriod period, DateTime? start = null, DateTime? end = null, CancellationToken ct = default);
        Task<WebCallResult<IEnumerable<OkexFuturesCandle>>> Futures_GetCandles_Async(string symbol, OkexSpotPeriod period, DateTime? start = null, DateTime? end = null, CancellationToken ct = default);
        WebCallResult<OkexFuturesEstimatedPrice> Futures_GetEstimatedPrice(string symbol, CancellationToken ct = default);
        Task<WebCallResult<OkexFuturesEstimatedPrice>> Futures_GetEstimatedPrice_Async(string symbol, CancellationToken ct = default);
        WebCallResult<OkexFuturesRate> Futures_GetFiatExchangeRates(CancellationToken ct = default);
        Task<WebCallResult<OkexFuturesRate>> Futures_GetFiatExchangeRates_Async(CancellationToken ct = default);
        WebCallResult<IEnumerable<OkexFuturesCandle>> Futures_GetHistoricalMarketData(string symbol, OkexSpotPeriod period, DateTime? start = null, DateTime? end = null, int limit = 300, CancellationToken ct = default);
        Task<WebCallResult<IEnumerable<OkexFuturesCandle>>> Futures_GetHistoricalMarketData_Async(string symbol, OkexSpotPeriod period, DateTime? start = null, DateTime? end = null, int limit = 300, CancellationToken ct = default);
        WebCallResult<OkexFuturesHoldAmount> Futures_GetHoldAmount(string symbol, CancellationToken ct = default);
        Task<WebCallResult<OkexFuturesHoldAmount>> Futures_GetHoldAmount_Async(string symbol, CancellationToken ct = default);
        WebCallResult<OkexFuturesIndex> Futures_GetIndices(string symbol, CancellationToken ct = default);
        Task<WebCallResult<OkexFuturesIndex>> Futures_GetIndices_Async(string symbol, CancellationToken ct = default);
        WebCallResult<OkexFuturesLeverage> Futures_GetLeverage(string underlying, CancellationToken ct = default);
        Task<WebCallResult<OkexFuturesLeverage>> Futures_GetLeverage_Async(string underlying, CancellationToken ct = default);
        WebCallResult<IEnumerable<OkexFuturesLiquidatedOrder>> Futures_GetLiquidatedOrders(string symbol, OkexFuturesLiquidationStatus status, int limit = 100, long? from = null, long? to = null, CancellationToken ct = default);
        Task<WebCallResult<IEnumerable<OkexFuturesLiquidatedOrder>>> Futures_GetLiquidatedOrders_Async(string symbol, OkexFuturesLiquidationStatus status, int limit = 100, long? from = null, long? to = null, CancellationToken ct = default);
        WebCallResult<OkexFuturesMarkPrice> Futures_GetMarkPrice(string symbol, CancellationToken ct = default);
        Task<WebCallResult<OkexFuturesMarkPrice>> Futures_GetMarkPrice_Async(string symbol, CancellationToken ct = default);
        WebCallResult<OkexFuturesInterest> Futures_GetOpenInterests(string symbol, CancellationToken ct = default);
        Task<WebCallResult<OkexFuturesInterest>> Futures_GetOpenInterests_Async(string symbol, CancellationToken ct = default);
        WebCallResult<OkexFuturesOrderBook> Futures_GetOrderBook(string symbol, int? size = null, decimal? depth = null, CancellationToken ct = default);
        Task<WebCallResult<OkexFuturesOrderBook>> Futures_GetOrderBook_Async(string symbol, int? size = null, decimal? depth = null, CancellationToken ct = default);
        WebCallResult<OkexFuturesOrder> Futures_GetOrderDetails(string symbol, long? orderId = null, string? clientOrderId = null, CancellationToken ct = default);
        Task<WebCallResult<OkexFuturesOrder>> Futures_GetOrderDetails_Async(string symbol, long? orderId = null, string? clientOrderId = null, CancellationToken ct = default);
        WebCallResult<OkexFuturesPositions> Futures_GetPositions(CancellationToken ct = default);
        WebCallResult<OkexFuturesPositionsOfContract> Futures_GetPositions(string contract, CancellationToken ct = default);
        Task<WebCallResult<OkexFuturesPositions>> Futures_GetPositions_Async(CancellationToken ct = default);
        Task<WebCallResult<OkexFuturesPositionsOfContract>> Futures_GetPositions_Async(string contract, CancellationToken ct = default);
        WebCallResult<OkexFuturesPriceRange> Futures_GetPriceLimit(string symbol, CancellationToken ct = default);
        Task<WebCallResult<OkexFuturesPriceRange>> Futures_GetPriceLimit_Async(string symbol, CancellationToken ct = default);
        WebCallResult<IEnumerable<OkexFuturesSettlementHistory>> Futures_GetSettlementHistory(string? instrument = null, string? underlying = null, DateTime? start = null, DateTime? end = null, int limit = 100, CancellationToken ct = default);
        Task<WebCallResult<IEnumerable<OkexFuturesSettlementHistory>>> Futures_GetSettlementHistory_Async(string? instrument = null, string? underlying = null, DateTime? start = null, DateTime? end = null, int limit = 100, CancellationToken ct = default);
        WebCallResult<IEnumerable<OkexFuturesBill>> Futures_GetSymbolBills(string underlying, OkexFuturesBillType? type = null, int limit = 100, long? before = null, long? after = null, CancellationToken ct = default);
        Task<WebCallResult<IEnumerable<OkexFuturesBill>>> Futures_GetSymbolBills_Async(string underlying, OkexFuturesBillType? type = null, int limit = 100, long? before = null, long? after = null, CancellationToken ct = default);
        WebCallResult<OkexFuturesTicker> Futures_GetSymbolTicker(string symbol, CancellationToken ct = default);
        Task<WebCallResult<OkexFuturesTicker>> Futures_GetSymbolTicker_Async(string symbol, CancellationToken ct = default);
        WebCallResult<IEnumerable<OkexFuturesTradeFee>> Futures_GetTradeFeeRates(string? symbol = null, int? category = null, CancellationToken ct = default);
        Task<WebCallResult<IEnumerable<OkexFuturesTradeFee>>> Futures_GetTradeFeeRates_Async(string? symbol = null, int? category = null, CancellationToken ct = default);
        WebCallResult<IEnumerable<OkexFuturesTrade>> Futures_GetTrades(string symbol, int limit = 100, long? before = null, long? after = null, CancellationToken ct = default);
        Task<WebCallResult<IEnumerable<OkexFuturesTrade>>> Futures_GetTrades_Async(string symbol, int limit = 100, long? before = null, long? after = null, CancellationToken ct = default);
        WebCallResult<IEnumerable<OkexFuturesContract>> Futures_GetTradingContracts(CancellationToken ct = default);
        Task<WebCallResult<IEnumerable<OkexFuturesContract>>> Futures_GetTradingContracts_Async(CancellationToken ct = default);
        WebCallResult<IEnumerable<OkexFuturesTransaction>> Futures_GetTransactionDetails(string symbol, long? orderId = null, int limit = 100, long? before = null, long? after = null, CancellationToken ct = default);
        Task<WebCallResult<IEnumerable<OkexFuturesTransaction>>> Futures_GetTransactionDetails_Async(string symbol, long? orderId = null, int limit = 100, long? before = null, long? after = null, CancellationToken ct = default);
        WebCallResult<OkexFuturesMarginActionResponse> Futures_IncreaseDecreaseMargin(string symbol, OkexFuturesDirection direction, OkexFuturesMarginAction action, decimal amount, CancellationToken ct = default);
        Task<WebCallResult<OkexFuturesMarginActionResponse>> Futures_IncreaseDecreaseMargin_Async(string symbol, OkexFuturesDirection direction, OkexFuturesMarginAction action, decimal amount, CancellationToken ct = default);
        WebCallResult<OkexFuturesDirectionResponse> Futures_MarketCloseAll(string symbol, OkexFuturesDirection direction, CancellationToken ct = default);
        Task<WebCallResult<OkexFuturesDirectionResponse>> Futures_MarketCloseAll_Async(string symbol, OkexFuturesDirection direction, CancellationToken ct = default);
        WebCallResult<OkexFuturesPlacedOrder> Futures_ModifyOrder(string symbol, long? orderId = null, string? clientOrderId = null, string? requestId = null, decimal? newSize = null, decimal? newPrice = null, bool? cancelOnFail = null, CancellationToken ct = default);
        Task<WebCallResult<OkexFuturesPlacedOrder>> Futures_ModifyOrder_Async(string symbol, long? orderId = null, string? clientOrderId = null, string? requestId = null, decimal? newSize = null, decimal? newPrice = null, bool? cancelOnFail = null, CancellationToken ct = default);
        WebCallResult<OkexFuturesPlacedOrder> Futures_PlaceOrder(string symbol, OkexFuturesOrderType type, decimal size, OkexFuturesTimeInForce timeInForce = OkexFuturesTimeInForce.NormalOrder, decimal? price = null, bool match_price = false, string? clientOrderId = null, CancellationToken ct = default);
        Task<WebCallResult<OkexFuturesPlacedOrder>> Futures_PlaceOrder_Async(string symbol, OkexFuturesOrderType type, decimal size, OkexFuturesTimeInForce timeInForce = OkexFuturesTimeInForce.NormalOrder, decimal? price = null, bool match_price = false, string? clientOrderId = null, CancellationToken ct = default);
        WebCallResult<OkexFuturesAccountMode> Futures_SetAccountMode(string symbol, OkexFuturesMarginMode margin_mode, CancellationToken ct = default);
        Task<WebCallResult<OkexFuturesAccountMode>> Futures_SetAccountMode_Async(string symbol, OkexFuturesMarginMode margin_mode, CancellationToken ct = default);
        WebCallResult<OkexFuturesLeverage> Futures_SetLeverage(OkexFuturesMarginMode mode, string underlying, int leverage, string? instrument_id = null, OkexFuturesDirection? direction = null, CancellationToken ct = default);
        Task<WebCallResult<OkexFuturesLeverage>> Futures_SetLeverage_Async(OkexFuturesMarginMode mode, string underlying, int leverage, string? instrument_id = null, OkexFuturesDirection? direction = null, CancellationToken ct = default);
    }
}